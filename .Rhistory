source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7.R', echo=TRUE)
?write.table
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7.R', echo=TRUE)
?write.table
write.table(str.split.df,outfile5,append=TRUE,row.names=FALSE,col.names=FALSE,quote=FALSE,sep="}")
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7.R', echo=TRUE)
close(inconn)
close(outconn5)
close(outconn1)
close(outconn2)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7a.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7a.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7a.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7a.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7a.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7a.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7a.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7a.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7a.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7a.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7a.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7a.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7a.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7a.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7a.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7a.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7a.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7a.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7a.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7a.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7a.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7a.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7a.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7a.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7a.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7a.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7a.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7a.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7a.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7a.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7a.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7a.R', echo=TRUE)
rep("",7)
cc <- rep("",7)
cc
df <- as.data.frame(cc)
df
df <- data.frame(rep("",7))
df
df <- data.frame(xtab(rep("",7))
)
df <- data.frame(a="",b="",c="",d="",e="",f="",g="")
df
nrow(df)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7a.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7a.R', echo=TRUE)
colnames(df)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7a.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7a.R', echo=TRUE)
warnings()
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7b.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7b.R', echo=TRUE)
lin <- list("2015-07-01 04:03:09.932741 MYT [11775]  DEBUG:  connection failed: host=10.202.225.86 user=CELEBI_USR_MONCEL database=SYSTEM error=Access denied for user 'CELEBI_USR_MONCEL'
")
lin
lin <- list("2015-07-01 04:03:09.932741 MYT [11775]  DEBUG:  connection failed: host=10.202.225.86 user=CELEBI_USR_MONCEL database=SYSTEM error=Access denied for user 'CELEBI_USR_MONCEL'
")[[1]]
lin
x <- strsplit(lin," ")
x
x <- strsplit(lin," ")[[1]]
length(x)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7b.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7b.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7b.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7b.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7b.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7b.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7b.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7b.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7b.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7b.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7b.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7b.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7b.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7b.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7b.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7b.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7b.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/analyze_nzlog-v7b.R', echo=TRUE)
bigr.connect(host="10.5.133.183",user="bigr",password="Passw0rd",port="5480")
library(bigr)
bigr.connect(host="10.5.133.183",user="bigr",password="Passw0rd",port="5480")
is.bigr.connected()
bigr.connect(host="10.5.133.183",user="bigr",password="Passw0rd")
is.bigr.connected()
exit
quit()
s <- "string(ltrim(table.pdpa_field),key)"
p <- str_locate_all(s,c("\\(","\\,","\\)","\\'"))
library(stringr)
p <- str_locate_all(s,c("\\(","\\,","\\)","\\'"))
p
p <- str_locate_all(s,c("\\(","\\,","\\)","\\'"))[[1]]
p
p <- str_locate_all(s,c("\\(","\\,","\\)","\\'"))
p
s
p <- str_locate_all(s,c("\\(","\\,","\\)","\\'","\\."))
p
substr(s,20,30)
substr(s,20,29)
quit()
s <- "CELEBI_STG_PROD_DB..encrypt(trim(upper(prof.customer_name)),field_customer_name,1)"
s
library(stringr)
begin_pos <- str_locate_all(s,c("\\(","\\,","\\)","\\'","\\."))
begin_pos
begin_pos <- str_locate_all(s,"\\.")
begin_pos
begin_pos <- str_locate_all(s,"\\.")
begin_pos
begin_pos <- str_locate_all(s,"\\)")
begin_pos <- str_locate_all(s,"\\.")
start_pos <- str_locate_all(s,"\\)")
end_pos <- str_locate_all(s,"\\)")
end_pos
s
substr(s,45,57)
s <- "decrypt(mobile_no ,encr.FIELD_MOBILE_NO,1)"
begin_pos <- str_locate_all(s,"\\(")
end_pos <- str_locate_all(s,"\\,")
begin_pos
end_pos
substr(s,9,18)
s <- "encrypt(upper(nvl(STREET_TYPE, 'UNKNOWN'))"
begin_pos <- str_locate_all(s,"\\(")
end_pos <- str_locate_all(s,"\\,")
begin_pos
end_pos
substr(s,19,29)
exit
quit()
4%%2
5%%3
3%%2
i = i+1
source('~/Desktop/Coursera Data Science/MyWork/fib4.R', echo=TRUE)
source('~/Desktop/Coursera Data Science/MyWork/fib4.R', echo=TRUE)
fib(10)
source('~/.active-rstudio-document', echo=TRUE)
fib(10)
source('~/Desktop/Coursera Data Science/MyWork/fib4.R', echo=TRUE)
fib(10)
source('~/Desktop/Coursera Data Science/MyWork/ttttttt.R', echo=TRUE)
fib(10)
source('~/Desktop/Coursera Data Science/MyWork/ttttttt.R', echo=TRUE)
fib(10)
install.packages("UsingR")
install.packages("manipulate")
data(galton)
install.packages("galton")
install.packages("HistData")
data(galton)
library(HistData)
data(galton)
library(manipulate)
data(galton)
library(UsingR)
data(galton)
quit()
library(bigr)
bigr.connect(host="10.5.133.183",user="bigr",password="Passw0rd")
is.bigr.connected()
nzData <- bigr.frame(bigr.env$TEXT_FILE, "/user/bigr/netezza/TF48-sessions-MYT.log", "}",coltypes=ifelse(1:7 %in% c(2,3), "integer", "character"),header=FALSE, na.string = "NA", useMapReduce=TRUE)
names(nzData) <- c("TS","PID","RPID","SESSION_TYPE","HOSTNAME","USERID","DBNAME")
summary(nzData[,c("HOSTNAME")])
summary(nzData,count(.) ~ TS + HOSTNAME)
summary(nzData[,c("TS","HOSTNAME")])
summary(nzData,count(.) ~ TS + HOSTNAME)
byHost <- summary(nzData,count(HOSTNAME) ~ .)
library("swirl")
swirl()
install_from_swirl("Data_Analysis")
install_from_swirl("Getting_And_Cleaning_Data")
install_from_swirl("Getting_and_Cleaning_Data")
install_from_swirl("Exploratory_Data_Analysis")
swirl()
install_from_swirl("R_Programming")
install_from_swirl("R_Programming_Alt")
install_from_swirl("Statistical_Inference")
install_from_swirl("Regression_Models")
swirl()
install.packages("manipulate")
install.packages("usingR")
install.packages("UsingR")
quit()
quit()
library(UsingR); data(galton); library(ggplot2); library(reshape2)
longGalton <- melt(galton, measure.vars = c("child", "parent"))
g <- ggplot(longGalton, aes(x = value)) + geom_histogram(aes(y = ..density.., f\
ill = variable), binwidth=1, color = "black") + geom_density(size = 2)
g <- g + facet_grid(. ~ variable)
g
library(UsingR); data(galton); library(ggplot2); library(reshape2)
longGalton <- melt(galton, measure.vars = c("child", "parent"))
g <- ggplot(longGalton, aes(x = value)) + geom_histogram(aes(y = ..density.., fill = variable), binwidth=1, color = "black") + geom_density(size = 2)
g <- g + facet_grid(. ~ variable)
g
library(manipulate)
myHist <- function(mu){
g <- ggplot(galton, aes(x = child))
g <- g + geom_histogram(fill = "salmon",
binwidth=1, aes(y = ..density..), color = "black")
g <- g + geom_density(size = 2)
g <- g + geom_vline(xintercept = mu, size = 2)
mse <- round(mean((galton$child - mu)^2), 3)
g <- g + labs(title = paste('mu = ', mu, ' MSE = ', mse))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(swirl)
swirl
swirl()
quit;
quit();
library(swirl)
swirl()
values <- c("A", as.character(2:10), "J", "Q", "K")
suits <- c("spades", "hearts", "diamonds", "clubs")
# Create a deck as a 13x4 matrix which is easy to verify by eye.
deck <- sapply(suits, function(suit)paste(values, suit, sep=":"))
# Verify.
deck
# Note the value of a card is its row index (if Aces are low.)
# Select n cards from a deck at random without replacement.
hand <- function(n, deck)sample(deck, n, replace=FALSE)
# Deal k hands of n cards each as a kxn matrix.
deal <- function(k, n, deck){
# Select kxn cards at random without replacement.
temp <- hand(k*n, deck)
# Reshape selections into a kxn matrix. Since R
# fills by column, this is like dealing the cards
# out in circular order around the table. (Not that
# it makes any difference since the selection process
# is a random permutation of the deck anyway.)
matrix(temp, k, n)
}
deal
deck
hand
hand(1,deck)
hand(4,deck)
x <- c(0,2,2,0,0); y <- c( 0,0,1,1,0)
plot(x, y, lwd = 3, frame = FALSE, type = "l")
segments(0,0,2,1,lwd=3)
plot(x, y, lwd = 3, frame = FALSE, type = "l")
segments(0,0,2,1,lwd=3)
#polygon(c(.5,1.5,1.5,.5,.5),c(0,0,.75,.25,0),lwd= 3, col = "lightblue")
polygon(c(0,1.6,1.6,0),c(0,0,.8,0),lwd=3,col="lightblue")
mypdf <- function(x){x/2}
#polygon(c(0,.6,.6,0),c(0,0,.3,0),lwd=3, col="lightblue")
dice_fair <- c(1/6,1/6,1/6,1/6,1/6,1/6)
dice_high <- c(1/21,2/21,3/21,4/21,5/21,6/21)
dice_low <- c(6/21,5/21,4/21,3/21,2/21,1/21)
expect_dice <- function(pmf){ mu <- 0; for (i in 1:6) mu <- mu + i*pmf[i]; mu}
dice_sqr <- c(1,4,9,16,25,36)
edh <- expect_dice(dice_high)
edl <- expect_dice(dice_low)
edh
edl
swirl()
library(ggplot2)
dat <- data.frame(
x = c(sample(1 : 6, nosim, replace = TRUE),
apply(matrix(sample(1 : 6, nosim * 2, replace = TRUE),
nosim), 1, mean),
apply(matrix(sample(1 : 6, nosim * 3, replace = TRUE),
nosim), 1, mean),
apply(matrix(sample(1 : 6, nosim * 4, replace = TRUE),
nosim), 1, mean)
),
size = factor(rep(1 : 4, rep(nosim, 4))))
g <- ggplot(dat, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.25, colour = "black")
g <- g + facet_grid(. ~ size)
print(g)
dat <- data.frame(
x = c(sample(1 : 6, nosim, replace = TRUE),
apply(matrix(sample(1 : 6, nosim * 2, replace = TRUE),
nosim), 1, mean),
apply(matrix(sample(1 : 6, nosim * 3, replace = TRUE),
nosim), 1, mean),
apply(matrix(sample(1 : 6, nosim * 4, replace = TRUE),
nosim), 1, mean)
),
size = factor(rep(1 : 4, rep(nosim, 4))))
g <- ggplot(dat, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.25, colour = "black")
g <- g + facet_grid(. ~ size)
print(g)
library(ggplot2)
dat <- data.frame(
x = c(sample(1 : 6, nosim, replace = TRUE),
apply(matrix(sample(1 : 6, nosim * 2, replace = TRUE),
nosim), 1, mean),
apply(matrix(sample(1 : 6, nosim * 3, replace = TRUE),
nosim), 1, mean),
apply(matrix(sample(1 : 6, nosim * 4, replace = TRUE),
nosim), 1, mean)
),
size = factor(rep(1 : 4, rep(nosim, 4))))
g <- ggplot(dat, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.25, colour = "black")
g <- g + facet_grid(. ~ size)
print(g)
library(ggplot2)
dat <- data.frame(
x = c(sample(1 : 6, nosim, replace = TRUE),
apply(matrix(sample(1 : 6, nosim * 2, replace = TRUE),
nosim), 1, mean),
apply(matrix(sample(1 : 6, nosim * 3, replace = TRUE),
nosim), 1, mean),
apply(matrix(sample(1 : 6, nosim * 4, replace = TRUE),
nosim), 1, mean)
),
size = factor(rep(1 : 4, rep(nosim, 4))))
dat <- data.frame(
x = c(sample(1 : 6, nosim, replace = TRUE),
apply(matrix(sample(1 : 6, nosim * 2, replace = TRUE),
nosim), 1, mean),
apply(matrix(sample(1 : 6, nosim * 3, replace = TRUE),
nosim), 1, mean),
apply(matrix(sample(1 : 6, nosim * 4, replace = TRUE),
nosim), 1, mean)
),
size = factor(rep(1 : 4, rep(nosim, 4))))
dice_fair <- c(1/6,1/6,1/6,1/6,1/6,1/6)
dice_high <- c(1/21,2/21,3/21,4/21,5/21,6/21)
dice_low <- c(6/21,5/21,4/21,3/21,2/21,1/21)
expect_dice <- function(pmf){ mu <- 0; for (i in 1:6) mu <- mu + i*pmf[i]; mu}
dice_sqr <- c(1,4,9,16,25,36)
edh <- expect_dice(dice_high)
edl <- expect_dice(dice_low)
spop <- c(1,4,7,10,13)
sam0 <- c(1,4)
sam1 <- c(1,7)
sam2 <- c(1,10)
sam3 <- c(1,13)
sam4 <- c(4,7)
sam5 <- c(4,10)
sam6 <- c(4,13)
sam7 <- c(7,10)
sam8 <- c(7,13)
sam9 <- c(10,13)
allsam <- matrix(c(sam0,sam1,sam2,sam3,sam4,sam5,sam6,sam7,sam8,sam9),nrow=10,ncol=2,byrow=TRUE)
smeans <- apply(allsam,1,mean)
library(ggplot2)
nosim <- 10000; n <- 10
dat <- data.frame(
x = c(rnorm(nosim), apply(matrix(rnorm(nosim * n), nosim), 1, mean)),
what = factor(rep(c("Obs", "Mean"), c(nosim, nosim)))
)
np <- ggplot(dat, aes(x = x, fill = what)) + geom_density(size = 2, alpha = .2);
print(np)
library(ggplot2)
dat <- data.frame(
x = c(sample(1 : 6, nosim, replace = TRUE),
apply(matrix(sample(1 : 6, nosim * 2, replace = TRUE),
nosim), 1, mean),
apply(matrix(sample(1 : 6, nosim * 3, replace = TRUE),
nosim), 1, mean),
apply(matrix(sample(1 : 6, nosim * 4, replace = TRUE),
nosim), 1, mean)
),
size = factor(rep(1 : 4, rep(nosim, 4))))
g <- ggplot(dat, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.25, colour = "black")
g <- g + facet_grid(. ~ size)
print(g)
# some plots
par(mfrow = c(1, 2))
plot(c(-0.25, 0, 0, 1, 1, 1.25), c(0, 0, 1, 1, 0, 0), type = "l", lwd = 3, frame = FALSE, xlab="", ylab = ""); title('f(t)')
plot(c(-0.25, 0, 1, 1, 1.25), c(0, 0, 1, 0, 0), type = "l", lwd = 3, frame = FALSE, xlab="", ylab = ""); title('t f(t)')
# some plots
par(mfrow = c(1, 2))
plot(c(-0.25, 0, 2, 2, 2.25), c(0, 0, 1, 0, 0), type = "l", lwd = 3, frame = FALSE, xlab="", ylab = ""); title('f(t)')
my_x <- seq(0,2,by=.1)
my_y <- my_x^2/2
plot(my_y ~ my_x, type = "l", lwd = 3, frame = FALSE, xlab="", ylab = ""); title('t f(t)')
abline(v=2.0, lwd=3)
myfunc <- function(x){x^2/2}
sessionInfo()
library(bigr)
bigr.connect(host="10.5.133.183",user="bigr",password="Passw0rd")
is.bigr.connected()
airline <- bigr.frame(bigr.env$TEXT_FILE,"airline_demo.csv",coltypes=ifelse(1:29 %in% c(9,11,17,18,23), "character","integer"),header=TRUE, na.string="NA",useMapReduce=FALSE)
str(airline)
airlineFiltered <- airline[,c("Month","DayofMonth","DayOfWeek","CRSDepTime","Distance","ArrDelay")]
airlineFiltered$Delay <- ifelse(airlineFiltered$ArrDelay > 15, "High", ifelse(airlineFiltered$ArrDelay < 5, "Low", "Medium"))
airlineMatrix <- bigr.transform(airlineFiltered,outData="airlinef.sample.matrix",transformPath="airline.sample.transform")
airlineMatrix <- bigr.transform(airlineFiltered,outData="airlinef.sample.matrix",transformPath="airline.sample.transform")
airlineMatrix <- bigr.transform(airlineFiltered,outData="airlinef.sample.matrix",transformPath="airline.sample.transform")
str(airlineMatrix)
bigr.univariateStats(airlineMatrix)
bigr.bivariateStats(airlineMatrix,cols1=c("Month","DayofMonth","DayOfWeek","CRSDepTime","Distance"),cols2=c("ArrDelay"))
samples <- bigr.sample(airlineMatrix,perc=c(0.7,0.3))
train <- samples[[1]]
test <- samples[[2]]
nrow(train) / nrow(airlineMatrix)
nrow(test) / nrow(airlineMatrix)
lm <- bigr.lm(ArrDelay ~ ., data=train, directory="lm.airline")
coef(lm)
pred <- predict(lm, test, "lm.airline.preds")
pred
lm <- bigr.lm(ArrDelay ~ ., data=train, directory="lm.airline")
coef(lm)
pred <- predict(lm, test, "lm.airline.preds")
pred
lm <- bigr.lm(ArrDelay ~ ., data=train, directory="lm.airline")
coef(lm)
pred <- predict(lm, test, "lm.airline.preds")
pred
svmModel <- bigr.svm(formula=Delay ~ ., data=train, directory="svm.airline")
coef(svmModel)
predSVM <- predict(svmModel, test, "svm.preds.airline", returnScores=T)
predSVM
svmModel <- bigr.svm(formula=Delay ~ ., data=train, directory="svm.airline")
coef(svmModel)
predSVM <- predict(svmModel, test, "svm.preds.airline", returnScores=T)
predSVM
str(airline)
barplot(summary(airline$Year))
unique(airline$Year)
barplot(summary(factor(airline$Year)))
barplot(summary(level(airline$Year)))
airline$year
airline$Year
summary(airline$Year)
barplot(summary(airline$Year))
barplot(airline$Year)
plot(airline$Year)
airline$Year
View(airline)
tapply(airline$Year,sum)
tapply(airline$Year,count)
?tapply
tapply(airline$UniqueCarrier,airline$Year,sum)
tapply(airline$UniqueCarrier,airline$Year,sum)
attache(airline)
attach(airline)
tapply(UniqueCarrier,Year,sum)
tapply("UniqueCarrier",Year,sum)
tapply(Year,UniqueCarriersum)
tapply(Year,UniqueCarrier,sum)
tapply(ArrDelay,Year,sum)
airline
head (airline)
airline$UniqueCarrier
sapply(UniqueCarrier,sum)
lapply(UniqueCarrier, sum)
unique(UniqueCarrier)
tapply(ArrTime, Year, sum)
tapply(as.vector(ArrTime), as.vector(Year), sum)
tapply(as.vector(ArrTime), Year, sum)
tapply(as.numeric(ArrTime), as.vector(Year), sum)
bigr
?bigr
?bigr
barplot(summary(Deptime))
attach(airline)
View(airline)
barplot(summary(DepTime))
barplot(Arrtime)
barplot(ArrTime)
barplot(as.vector(ArrTime))
barplot(as.numeric(ArrTime))
barplot(as.numeric(as.vector(ArrTime)))
barplot(as.numeric(as.vector(Year)))
?summary
library(bigr)
barplot(bigr.summary(airline$Year))
?bigr
library(bigr)
?bigr.summary
?base.summary
summary(Year)
bigr.summary(Year)
ig
bigr.connect(host="10.5.133.183",user="bigr",password="Passw0rd")
library(bigr)
bigr.connect(host="10.5.133.183",user="bigr",password="Passw0rd")
is.bigr.connected()
airline <- bigr.frame(bigr.env$TEXT_FILE,"airline_demo.csv",coltypes=ifelse(1:29 %in% c(9,11,17,18,23), "character","integer"),header=TRUE, na.string="NA",useMapReduce=FALSE)
str(airline)
install.packages("caret")
install.packages("C50")
install.packages("kernlab")
install.packages("e1071")
quit();
source('C:/Users/09234/Desktop/Coursera Data Science/08 Practical Machine Learning/ML_Quiz#2Q#5.R')
install.packages("AppliedPredictiveModeling")
source('C:/Users/09234/Desktop/Coursera Data Science/08 Practical Machine Learning/ML_Quiz#2Q#5.R')
source('C:/Users/09234/Desktop/Coursera Data Science/08 Practical Machine Learning/ML_Quiz#2Q#5.R')
print(A2)
print(A1)
print(A2)
setwd("C:/Users/09234/CourseraPracticalMachineLearning")
